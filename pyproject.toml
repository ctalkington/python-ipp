[tool.poetry]
name = "pyipp"
description = "Asynchronous Python client for Internet Printing Protocol (IPP)"
authors = ["Chris Talkington <chris@talkingtontech.com>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["ipp", "api", "async", "client", "printer"]
documentation = "https://github.com/ctalkington/python-ipp"
homepage = "https://github.com/ctalkington/python-ipp"
license = "MIT"
maintainers = ["Chris Talkington <chris@talkingtontech.com>"]
packages = [
  {include = "pyipp", from = "src"},
]
readme = "README.md"
repository = "https://github.com/ctalkington/python-ipp"
version = "0.0.0"

[tool.poetry.dependencies]
aiohttp = ">=3.0.0"
awesomeversion = ">=21.10.1"
backoff = ">=1.9.0"
deepmerge = ">=0.1.0"
python = "^3.9"
yarl = ">=1.6.0"

[tool.poetry.dev-dependencies]
aresponses = "^2.1.4"
bandit = "^1.7.0"
black = "^22.3"
blacken-docs = "^1.12.0"
codespell = "^2.1.0"
coverage = {version = "^6.4", extras = ["toml"]}
darglint = "^1.8.1"
flake8 = "^4.0.1"
flake8-bandit = "^3.0.0"
flake8-bugbear = "^23.3.12"
flake8-builtins = "^1.5.3"
flake8-comprehensions = "^3.10.0"
flake8-docstrings = "^1.5.0"
flake8-eradicate = "^1.2.0"
flake8-markdown = "^0.3.0"
flake8-simplify = "^0.19.2"
freezegun = "^1.2.1"
isort = "^5.10.1"
mypy = "^0.961"
pre-commit = "^2.19.0"
pre-commit-hooks = "^4.3.0"
pylint = "^2.14.3"
pytest = "^7.0.1"
pytest-asyncio = "^0.21.0"
pytest-cov = "^3.0.0"
pytest-freezegun = "^0.4.2"
pyupgrade = "^3.4.0"
safety = "^2.3.1"
vulture = "^2.5"
yamllint = "^1.26.3"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/ctalkington/python-ipp/issues"
Changelog = "https://github.com/ctalkington/python-ipp/releases"

[tool.black]
target-version = ['py39']

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]
show_missing = true

[tool.coverage.run]
branch = true
source = ["pyipp"]

[tool.isort]
multi_line_output = 3
profile = "black"

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = 3.9

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
#check_untyped_defs = true
#disallow_any_generics = true
#disallow_incomplete_defs = true
#disallow_subclassing_any = true
#disallow_untyped_calls = true
#disallow_untyped_defs = true
#disallow_untyped_decorators = false
#no_implicit_optional = true
#no_implicit_reexport = true
#strict_optional = true
#warn_incomplete_stub = true
#warn_no_return = true
#warn_redundant_casts = true
#warn_return_any = true
#warn_unused_configs = true
#warn_unused_ignores = true

# No incremental mode
cache_dir = "/dev/null"

[[tool.mypy.overrides]]
follow_imports = "skip"
module = "mypy-aiohttp.*"

[tool.pylint.MASTER]
extension-pkg-whitelist = [
  "pydantic",
]
ignore = [
  "examples",
  "tests",
]
load-plugins = [
  "pylint.extensions.bad_builtin",
  "pylint.extensions.code_style",
  "pylint.extensions.docparams",
  "pylint.extensions.docstyle",
  "pylint.extensions.empty_comment",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.typing",
]

[tool.pylint.BASIC]
good-names = [
  "_",
  "ex",
  "fp",
  "i",
  "id",
  "j",
  "k",
  "on",
  "Run",
  "T",
  "wv",
]

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "too-few-public-methods",
  "too-many-arguments",
  "duplicate-code",
  "format",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pyright]
include = ["src"]

[tool.pytest.ini_options]
addopts = " --cov"

[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
verbose = true

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
